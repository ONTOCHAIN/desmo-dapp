
const axios = require('axios');
const {
    DIRECTORY_URL,
    TD_LIST,
    WAM_URL,
    DIRECTORIES_PORT,
    ZION_PORT
} = require('./config');

var auth=null;
var PORTS=DIRECTORIES_PORT;

function replaceIP(url, replacewith = "localhost") {
    const offset_1 = url.indexOf("://");
    var offset_2 = url.split("://")[1].indexOf(":");
    if (offset_2 < 1) {
        offset_2 = url.split("://")[1].indexOf("/");
    }
    if (offset_2 > 0) {
        return url.substring(0, offset_1 + 3) + replacewith + url.substring(offset_1 + 3 + offset_2);
    }
    return url;
}


function replaceAllIPWith(json, filedFilter = undefined, replacewith = "localhost") {
    const temp = json;
    for (var x in json) {
        if (typeof (json[x]) === 'object') {
            json[x] = replaceAllIPWith(json[x], filedFilter, replacewith);
        } else if (typeof (json[x]) === 'string' && (filedFilter === undefined || x === filedFilter) && json[x].includes("://")) {
            json[x] = replaceIP(json[x], replacewith);
        }
    }
    return temp;
}

function getThingFormWAM(url, cbok, cberr, useOnlyLocalhost = true) {
    axios.get(url)
        .then((ris) => {
            if (ris.status === 200) {
                var risJson = ris.data;
                const mustHave = ["title", "@context", "@type", "forms", "id", "properties"];
                var mustHavePass = true;
                for (var x in mustHave) {
                    if (risJson[mustHave[x]] === undefined) {
                        mustHavePass = false;
                        break;
                    }
                }
                if (mustHavePass) {
                    if (useOnlyLocalhost) {
                        risJson = replaceAllIPWith(risJson, "href");
                    }
                    cbok(risJson);
                } else {
                    cberr("Error: getThingFormWAM not valid TD. For: " + url);
                }
            } else {
                cberr("Error: getThingFormWAM status: " + ris.status + ". For: " + url);
            }
        })
        .catch((err) => {
            cberr("Error: getThingFormWAM for: " + url + "->" + err);
        });
}

function registerTD(
    directory = DIRECTORY_URL + ":" + PORTS[0],
    td_url,
    cbok = () => { },
    cberr = () => { },  
    forceCreate = false
) {
    var headers = { 'Content-Type': 'application/ld+json' };
    if(auth!==null){
        headers ={ 'Content-Type': 'application/ld+json' , 'Authorization': 'Bearer '+auth.replaceAll("\n",'').replaceAll("\r",'').trim()};
        console.log("You are using Authorization: ", headers);
    }
    getThingFormWAM(
        td_url,
        (jsonTD) => {
            // console.log("directory",directory+"/things")
            // console.log("jsonTD",jsonTD)
            //console.log("headers",headers)
            if (forceCreate || jsonTD.id === undefined) {
                /*
                With "forceCreate" if the jsonTD has an ID it will be removed
                and then the TD will has a new ID generated by the Directory
                */
                const jsonTD_withNoID = jsonTD;
                delete jsonTD_withNoID.id;
                axios.post(
                    directory + "/things",
                    jsonTD_withNoID,
                    {headers:headers}
                ).then((ris) => {
                    if (ris.status === 200 || ris.status === 201) {
                        cbok(ris.data);
                    } else {
                        cberr("Error: registerTD(POST) status: " + ris.status + ". For: " + td_url);
                    }
                })
                    .catch((err) => {
                        cberr("Error: registerTD(POST) for: " + td_url + "->" + err);
                    })

            } else {
                /*
                Use the WAM ID and so we need to PUT the TD
                and not to create it (POST)
                */
                const id = jsonTD.id;
                axios.put(
                    directory + "/things/" + id,
                    jsonTD,
                    {headers:headers}
                ).then((ris) => {
                    if (ris.status === 200 || ris.status === 201) {
                        cbok(ris.data);
                    } else {
                        cberr("Error: registerTD(PUT) status: " + ris.status + ". For: " + td_url);
                    }
                })
                .catch((err) => {
                    //console.log("ris",err);
                    cberr("Error: registerTD(PUT) for: " + td_url + "->" + err);
                })
            }
        },
        (err) => {
            cberr("Error: registerTD for: " + td_url + "->" + err);
        }
    );
}


function getTDListFromWAM(url, cbok, cberr, useOnlyLocalhost = true) {
    axios.get(url)
        .then((ris) => {
            if (ris.status === 200) {
                var list_td = ris.data;
                if (useOnlyLocalhost) {
                    list_td = replaceAllIPWith(list_td);
                    // console.log("list_td",list_td);
                }
                cbok(list_td);
            } else {
                cberr("Error: getTDListFromWAM status: " + ris.status);
            }
        })
        .catch((err) => {
            cberr("Error: getTDListFromWAM ->" + err);
        })
}

/*
"randomMiss" is the prob to not register a TD into a Directory "actualDir"
randomMiss >=0 && randomMiss<1
*/
function registerALlTDs(actualDir, list, cb = () => { }, randomMiss = 0) {
    const avoidDup = [];
    var barrier = 0;
    var registeredCount = 0;
    const count = list.length;
    const hit = () => {
        barrier++;
        if (barrier >= count) {
            cb(registeredCount);
        }
    }
    for (var x in list) {
        const td_url = list[x];
        if (!avoidDup.includes(td_url)) {
            avoidDup.push(td_url);
            if (randomMiss > 0 && Math.random() < randomMiss) {
                console.log("TD NOT REGISTERED (random-miss): " + td_url + ", for Directory: " + actualDir);
                hit();
            } else {
                registerTD(
                    actualDir,
                    td_url,
                    (ris) => {
                        registeredCount++;
                        console.log("TD REGISTERED: " + td_url + ", for Directory: " + actualDir);
                        hit();
                    },
                    (err) => {
                        console.log(err);
                        hit();
                    },
                    // true
                );
            }
        } else {
            hit();
        }
    }
}

function getAllThingsID(
    directory = DIRECTORY_URL + ":" + PORTS[0],
    cbok = () => { },
    cberr = () => { }
) {
    axios.get(directory + "/things")
        .then((ris) => {
            if (ris.status === 200) {
                const list = ris.data;
                const listID = [];
                for (var x in list) {
                    if (list[x].id !== undefined) {
                        listID.push(list[x].id);
                    }
                }
                cbok(listID);
            } else {
                cberr("Error: getAllThings status: " + ris.status);
            }
        })
        .catch((err) => {
            cberr("Error: getAllThings ->" + err);
        })
}

function removeAll(
    directory = DIRECTORY_URL + ":" + PORTS[0],
    idLIST,
    cbok = () => { },
    cberr = () => { }
) {
    var headers = { 'Content-Type': 'application/ld+json' };
    if(auth!==null){
        headers ={ 'Content-Type': 'application/ld+json' , 'Authorization': 'Bearer '+auth.replaceAll("\n",'').replaceAll("\r",'').trim()};
        console.log("You are using Authorization: ", headers);
    }
    for (var x in idLIST) {
        const id = idLIST[x];
        axios.delete(directory + "/things/" + id,{headers})
            .then((ris) => {
                if (ris.status === 204) {
                    cbok(id);
                } else {
                    cberr("Error: removeAll for id:" + id + " status: " + ris.status);
                }
            })
            .catch((err) => {
                cberr("Error: removeAll for id:" + id + " ->" + err);
            })
    }
}


function dropAllAndRegisterThings(actualDir, cb = () => { }, randomMiss = 0) {
    console.log("DROP ALL TDs and register things for Directory: " + actualDir);
    getAllThingsID(
        actualDir,
        (tds) => {
            const count = tds.length;
            const next = ()=>{
                if (TD_LIST.length > 0) {
                    registerALlTDs(
                        actualDir,
                        TD_LIST,
                        cb,
                        randomMiss
                    );
                } else {
                    getTDListFromWAM(
                        WAM_URL,
                        (list_td) => {
                            registerALlTDs(
                                actualDir,
                                list_td,
                                cb,
                                randomMiss
                            );
                        },
                        (err) => {
                            console.log(err);
                        }
                    )

                }
            }
            if (count < 1) {
                next();
            } else {
                var barrier = 0;
                removeAll(
                    actualDir,
                    tds,
                    (id) => {
                        console.log("TD DROPPED: " + id + ", for Directory: " + actualDir);
                        barrier++;
                        if (barrier >= count) {
                            next();
                        }
                    },
                    (err) => {
                        barrier++;
                        console.log(err);
                    }
                )
            }
        },
        (err) => {
            console.log(err);
        }
    )
}

function isDirectoryAlive(url, cb) {
    //for Linksmart 200
    //for Zion 404
    axios.get(url)
        .then((ris) => {
            // console.log("ris.status",ris.status);
            cb(ris.status === 200);
        })
        .catch((err) => {
            if(err.response.status===404){
                cb(true)
            }else{
                console.log("isDirectoryAlive.ris.err",err);
                cb(false)
            }
        });
}

function run(auth) {


    if (TD_LIST.length > 0) {
        console.log("###################");
        console.log("USING  TD_LIST    #");
        console.log("###################");
    } else {
        console.log("###################");
        console.log("USING  WAM URL    #");
        console.log("###################");
    }

    const justFirstDirectory = process.argv[2] !== "--m";
    const missRandom = (
        process.argv[3] !== undefined &&
        !isNaN(Number(process.argv[3])) &&
        Number(process.argv[3]) < 1 &&
        Number(process.argv[3]) > 0
    ) ? Number(process.argv[3]) : 0;
    var totalRegistered = 0;
    var directoriesSetted = 0;
    var directoriesToSetup = 0;
    const hit = (TDregistered) => {
        totalRegistered += TDregistered;
        directoriesSetted++;
        if (directoriesSetted >= directoriesToSetup) {
            console.log("#############################");
            console.log("####     SETUP FINISHED!    #");
            console.log("#############################");
            console.log("Total TD registered: "+ totalRegistered);
        }
    }
    if (justFirstDirectory) {
        directoriesToSetup = 1;
        const directory_url = DIRECTORY_URL + ":" + PORTS[0];
        console.log("Setup just the first Directory: " + directory_url);
        isDirectoryAlive(directory_url,
            (alive) => {
                if (alive) {
                    dropAllAndRegisterThings(directory_url, hit, missRandom);
                } else {
                    console.log("WARNING: The Directory is down: " + directory_url + ". IGNORED.");
                    hit(0);
                }
            }
        );
    } else {
        directoriesToSetup = PORTS.length;
        console.log("Setup all the Directories.");
        for (var x = 0; x < PORTS.length; x++) {
            const directory_url = DIRECTORY_URL + ":" + PORTS[x];
            isDirectoryAlive(directory_url,
                (alive) => {
                    if (alive) {
                        dropAllAndRegisterThings(directory_url, hit, missRandom);
                    } else {
                        console.log("WARNING: The Directory is down: " + directory_url + ". IGNORED.");
                        hit(0);
                    }
                }
            );
        }
    }



}

if(process.argv[2]==="--zion"){
    PORTS=ZION_PORT;
    if(process.argv[3]!==undefined){
        auth=process.argv[3];
    }else{
        console.log("WARNING you are trying to use Zion, Zion need Bearer authetication!");
        console.log("WARNING you shoud use the setup command like that:");
        console.log('node setup.js --zion "Bearer token"');
        console.log("Replace token with your.");
    }
}

run();