
const axios = require('axios');


const {
    DIRECTORY_URL,
    TD_LIST,
    WAM_URL
} = require('./config');

function replaceIP(url, replacewith = "localhost") {
    const offset_1 = url.indexOf("://");
    var offset_2 = url.split("://")[1].indexOf(":");
    if (offset_2 < 1) {
        offset_2 = url.split("://")[1].indexOf("/");
    }
    if (offset_2 > 0) {
        return url.substring(0, offset_1 + 3) + replacewith + url.substring(offset_1 + 3 + offset_2);
    }
    return url;
}


function replaceAllIPWith(json, filedFilter = undefined, replacewith = "localhost") {
    const temp = json;
    for (var x in json) {
        if (typeof (json[x]) === 'object') {
            json[x] = replaceAllIPWith(json[x], filedFilter, replacewith);
        } else if (typeof (json[x]) === 'string' && (filedFilter === undefined || x === filedFilter) && json[x].includes("://")) {
            json[x] = replaceIP(json[x], replacewith);
        }
    }
    return temp;
}

function getThingFormWAM(url, cbok, cberr, useOnlyLocalhost = true) {
    axios.get(url)
        .then((ris) => {
            if (ris.status === 200) {
                var risJson = ris.data;
                const mustHave = ["title", "@context", "@type", "forms", "id", "properties"];
                var mustHavePass = true;
                for (var x in mustHave) {
                    if (risJson[mustHave[x]] === undefined) {
                        mustHavePass = false;
                        break;
                    }
                }
                if (mustHavePass) {
                    if (useOnlyLocalhost) {
                        risJson = replaceAllIPWith(risJson, "href");
                    }
                    // const json={
                    //     "@context": ["https://www.w3.org/2019/wot/td/v1"],
                    //     "title": "ExampleSensor",
                    //     "properties": {
                    //       "status": {
                    //         "forms": [
                    //           {
                    //             "op": [
                    //               "readproperty"
                    //             ],
                    //             "href": "https://example.com/status",
                    //             "contentType": "text/html"
                    //           }
                    //         ]
                    //       }
                    //     },
                    //     "security": [
                    //       "nosec_sc"
                    //     ],
                    //     "securityDefinitions": {
                    //       "nosec_sc": {
                    //         "scheme": "nosec"
                    //       }
                    //     }
                    //   };
                    cbok(risJson);
                } else {
                    cberr("Error: getThingFormWAM not valid TD. For: " + url);
                }
            } else {
                cberr("Error: getThingFormWAM status: " + ris.status + ". For: " + url);
            }
        })
        .catch((err) => {
            cberr("Error: getThingFormWAM for: " + url + "->" + err);
        });
}

function registerTD(td_url, cbok, cberr, forceCreate = false) {
    const headers = { 'Content-Type': 'application/ld+json' };
    getThingFormWAM(
        td_url,
        (jsonTD) => {
            // console.log(DIRECTORY_URL+"/things",DIRECTORY_URL+"/things")
            // console.log("jsonTD",jsonTD)
            // console.log("headers",headers)
            if (forceCreate || jsonTD.id === undefined) {
                /*
                With "forceCreate" if the jsonTD has an ID it will be removed
                and then the TD will has a new ID generated by the Directory
                */
                const jsonTD_withNoID = jsonTD;
                delete jsonTD_withNoID.id;
                axios.post(
                    DIRECTORY_URL + "/things",
                    jsonTD_withNoID,
                    headers
                ).then((ris) => {
                    if (ris.status === 200 || ris.status === 201) {
                        cbok(ris.data);
                    } else {
                        cberr("Error: registerTD(POST) status: " + ris.status + ". For: " + td_url);
                    }
                })
                    .catch((err) => {
                        cberr("Error: registerTD(POST) for: " + td_url + "->" + err);
                    })

            } else {
                /*
                Use the WAM ID and so we need to PUT the TD
                and not to create it (POST)
                */
                const id = jsonTD.id;
                axios.put(
                    DIRECTORY_URL + "/things/" + id,
                    jsonTD,
                    headers
                ).then((ris) => {
                    if (ris.status === 200 || ris.status === 201) {
                        cbok(ris.data);
                    } else {
                        cberr("Error: registerTD(PUT) status: " + ris.status + ". For: " + td_url);
                    }
                })
                    .catch((err) => {
                        cberr("Error: registerTD(PUT) for: " + td_url + "->" + err);
                    })
            }
        },
        (err) => {
            cberr("Error: registerTD for: " + td_url + "->" + err);
        }
    );
}


function getTDListFromWAM(url, cbok, cberr, useOnlyLocalhost = true) {
    axios.get(url)
        .then((ris) => {
            if (ris.status === 200) {
                var list_td = ris.data;
                if (useOnlyLocalhost) {
                    list_td = replaceAllIPWith(list_td);
                    // console.log("list_td",list_td);
                }
                cbok(list_td);
            } else {
                cberr("Error: getTDListFromWAM status: " + ris.status);
            }
        })
        .catch((err) => {
            cberr("Error: getTDListFromWAM ->" + err);
        })
}


function registerALlTDs(list) {
    const avoidDup = [];
    for (var x in list) {
        const td_url = list[x];
        if (!avoidDup.includes(td_url)) {
            avoidDup.push(td_url);
            registerTD(
                td_url,
                (ris) => {
                    console.log("TD registered for: " + td_url, ris);
                },
                (err) => {
                    console.log(err);
                }
            );
        }
    }
}

function getAllThingsID(cbok, cberr) {
    axios.get(DIRECTORY_URL + "/things")
        .then((ris) => {
            if (ris.status === 200) {
                const list = ris.data;
                const listID = [];
                for (var x in list) {
                    if (list[x].id !== undefined) {
                        listID.push(list[x].id);
                    }
                }
                cbok(listID);
            } else {
                cberr("Error: getAllThings status: " + ris.status);
            }
        })
        .catch((err) => {
            cberr("Error: getAllThings ->" + err);
        })
}

function removeAll(idLIST, cbok, cberr) {
    for (var x in idLIST) {
        const id = idLIST[x];
        axios.delete(DIRECTORY_URL + "/things/" +id)
            .then((ris) => {
                if (ris.status === 204) {
                    cbok(id);
                } else {
                    cberr("Error: removeAll for id:" + id + " status: " + ris.status);
                }
            })
            .catch((err) => {
                cberr("Error: removeAll for id:" + id + " ->" + err);
            })
    }
}

function run() {

    console.log("DROP ALL TDs");
    getAllThingsID(
        (tds) => {
            const count = tds.length;
            var barrier = 0;
            removeAll(tds,
                (id) => {
                    console.log("TD dropped: " + id);
                    barrier++;
                    if (barrier >= count) {
                        if (TD_LIST.length > 0) {
                            console.log("###################");
                            console.log("USING  TD_LIST    #");
                            console.log("###################");
                            registerALlTDs(TD_LIST);
                        } else {
                            console.log("###################");
                            console.log("USING  WAM URL    #");
                            console.log("###################");
                            getTDListFromWAM(
                                WAM_URL,
                                registerALlTDs,
                                (err) => {
                                    console.log(err);
                                }
                            )

                        }
                    }
                },
                (err) => {
                    console.log(err);
                }
            )
        },
        (err) => {
            console.log(err);
        }
    )


}

run();